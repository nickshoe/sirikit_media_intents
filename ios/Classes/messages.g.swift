// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum MediaItemType: Int {
  case unknown = 0
  case song = 1
  case album = 2
  case artist = 3
  case genre = 4
  case playlist = 5
  case podcastShow = 6
  case podcastEpisode = 7
  case podcastPlaylist = 8
  case musicStation = 9
  case audioBook = 10
  case movie = 11
  case tvShow = 12
  case tvShowEpisode = 13
  case musicVideo = 14
  case podcastStation = 15
  case radioStation = 16
  case station = 17
  case music = 18
  case algorithmicRadioStation = 19
  case news = 20
}

/// Generated class from Pigeon that represents data sent in messages.
struct MediaSearch {
  var mediaIdentifier: String? = nil
  var mediaType: MediaItemType
  var mediaName: String? = nil
  var artistName: String? = nil
  var albumName: String? = nil
  var genreNames: [String]? = nil
  var moodNames: [String]? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MediaSearch? {
    let mediaIdentifier: String? = nilOrValue(pigeonVar_list[0])
    let mediaType = pigeonVar_list[1] as! MediaItemType
    let mediaName: String? = nilOrValue(pigeonVar_list[2])
    let artistName: String? = nilOrValue(pigeonVar_list[3])
    let albumName: String? = nilOrValue(pigeonVar_list[4])
    let genreNames: [String]? = nilOrValue(pigeonVar_list[5])
    let moodNames: [String]? = nilOrValue(pigeonVar_list[6])

    return MediaSearch(
      mediaIdentifier: mediaIdentifier,
      mediaType: mediaType,
      mediaName: mediaName,
      artistName: artistName,
      albumName: albumName,
      genreNames: genreNames,
      moodNames: moodNames
    )
  }
  func toList() -> [Any?] {
    return [
      mediaIdentifier,
      mediaType,
      mediaName,
      artistName,
      albumName,
      genreNames,
      moodNames,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MediaItem {
  var identifier: String
  var title: String
  var type: MediaItemType
  var artist: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MediaItem? {
    let identifier = pigeonVar_list[0] as! String
    let title = pigeonVar_list[1] as! String
    let type = pigeonVar_list[2] as! MediaItemType
    let artist = pigeonVar_list[3] as! String

    return MediaItem(
      identifier: identifier,
      title: title,
      type: type,
      artist: artist
    )
  }
  func toList() -> [Any?] {
    return [
      identifier,
      title,
      type,
      artist,
    ]
  }
}

private class MessagesPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return MediaItemType(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      return MediaSearch.fromList(self.readValue() as! [Any?])
    case 131:
      return MediaItem.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class MessagesPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? MediaItemType {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? MediaSearch {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? MediaItem {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MessagesPigeonCodecWriter(data: data)
  }
}

class MessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = MessagesPigeonCodec(readerWriter: MessagesPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol IOSSirikitMediaIntentsFlutterApiProtocol {
  func resolveMediaItems(mediaSearch mediaSearchArg: MediaSearch, completion: @escaping (Result<[MediaItem], PigeonError>) -> Void)
  func playMediaItems(mediaItems mediaItemsArg: [MediaItem], completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class IOSSirikitMediaIntentsFlutterApi: IOSSirikitMediaIntentsFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: MessagesPigeonCodec {
    return MessagesPigeonCodec.shared
  }
  func resolveMediaItems(mediaSearch mediaSearchArg: MediaSearch, completion: @escaping (Result<[MediaItem], PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.sirikit_media_intents.IOSSirikitMediaIntentsFlutterApi.resolveMediaItems\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([mediaSearchArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! [MediaItem]
        completion(.success(result))
      }
    }
  }
  func playMediaItems(mediaItems mediaItemsArg: [MediaItem], completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.sirikit_media_intents.IOSSirikitMediaIntentsFlutterApi.playMediaItems\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([mediaItemsArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol IOSSirikitMediaIntentsApi {
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class IOSSirikitMediaIntentsApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `IOSSirikitMediaIntentsApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: IOSSirikitMediaIntentsApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
}
