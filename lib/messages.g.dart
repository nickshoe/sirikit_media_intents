// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

// ignore: unused_element
PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse(
    {Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum MediaItemType {
  unknown,
  song,
  album,
  artist,
  genre,
  playlist,
  podcastShow,
  podcastEpisode,
  podcastPlaylist,
  musicStation,
  audioBook,
  movie,
  tvShow,
  tvShowEpisode,
  musicVideo,
  podcastStation,
  radioStation,
  station,
  music,
  algorithmicRadioStation,
  news,
}

class MediaSearch {
  MediaSearch({
    this.mediaIdentifier,
    required this.mediaType,
    this.mediaName,
    this.artistName,
    this.albumName,
    this.genreNames,
    this.moodNames,
  });

  String? mediaIdentifier;

  MediaItemType mediaType;

  String? mediaName;

  String? artistName;

  String? albumName;

  List<String>? genreNames;

  List<String>? moodNames;

  Object encode() {
    return <Object?>[
      mediaIdentifier,
      mediaType,
      mediaName,
      artistName,
      albumName,
      genreNames,
      moodNames,
    ];
  }

  static MediaSearch decode(Object result) {
    result as List<Object?>;
    return MediaSearch(
      mediaIdentifier: result[0] as String?,
      mediaType: result[1]! as MediaItemType,
      mediaName: result[2] as String?,
      artistName: result[3] as String?,
      albumName: result[4] as String?,
      genreNames: (result[5] as List<Object?>?)?.cast<String>(),
      moodNames: (result[6] as List<Object?>?)?.cast<String>(),
    );
  }
}

class MediaItem {
  MediaItem({
    required this.identifier,
    required this.title,
    required this.type,
    required this.artist,
    this.artwork,
  });

  String identifier;

  String title;

  MediaItemType type;

  String artist;

  MediaItemImage? artwork;

  Object encode() {
    return <Object?>[
      identifier,
      title,
      type,
      artist,
      artwork,
    ];
  }

  static MediaItem decode(Object result) {
    result as List<Object?>;
    return MediaItem(
      identifier: result[0]! as String,
      title: result[1]! as String,
      type: result[2]! as MediaItemType,
      artist: result[3]! as String,
      artwork: result[4] as MediaItemImage?,
    );
  }
}

class MediaItemImage {
  MediaItemImage({
    required this.url,
    required this.width,
    required this.height,
  });

  String url;

  double width;

  double height;

  Object encode() {
    return <Object?>[
      url,
      width,
      height,
    ];
  }

  static MediaItemImage decode(Object result) {
    result as List<Object?>;
    return MediaItemImage(
      url: result[0]! as String,
      width: result[1]! as double,
      height: result[2]! as double,
    );
  }
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is MediaItemType) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    } else if (value is MediaSearch) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is MediaItem) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is MediaItemImage) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : MediaItemType.values[value];
      case 130:
        return MediaSearch.decode(readValue(buffer)!);
      case 131:
        return MediaItem.decode(readValue(buffer)!);
      case 132:
        return MediaItemImage.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class IOSSirikitMediaIntentsFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  Future<List<MediaItem>> resolveMediaItems(MediaSearch mediaSearch);

  Future<void> playMediaItems(List<MediaItem> mediaItems);

  static void setUp(
    IOSSirikitMediaIntentsFlutterApi? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix =
        messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<
          Object?> pigeonVar_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.sirikit_media_intents.IOSSirikitMediaIntentsFlutterApi.resolveMediaItems$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.sirikit_media_intents.IOSSirikitMediaIntentsFlutterApi.resolveMediaItems was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MediaSearch? arg_mediaSearch = (args[0] as MediaSearch?);
          assert(arg_mediaSearch != null,
              'Argument for dev.flutter.pigeon.sirikit_media_intents.IOSSirikitMediaIntentsFlutterApi.resolveMediaItems was null, expected non-null MediaSearch.');
          try {
            final List<MediaItem> output =
                await api.resolveMediaItems(arg_mediaSearch!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<
          Object?> pigeonVar_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.sirikit_media_intents.IOSSirikitMediaIntentsFlutterApi.playMediaItems$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.sirikit_media_intents.IOSSirikitMediaIntentsFlutterApi.playMediaItems was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final List<MediaItem>? arg_mediaItems =
              (args[0] as List<Object?>?)?.cast<MediaItem>();
          assert(arg_mediaItems != null,
              'Argument for dev.flutter.pigeon.sirikit_media_intents.IOSSirikitMediaIntentsFlutterApi.playMediaItems was null, expected non-null List<MediaItem>.');
          try {
            await api.playMediaItems(arg_mediaItems!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

class IOSSirikitMediaIntentsApi {
  /// Constructor for [IOSSirikitMediaIntentsApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  IOSSirikitMediaIntentsApi(
      {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix =
            messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;
}
